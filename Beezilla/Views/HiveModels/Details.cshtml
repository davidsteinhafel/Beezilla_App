@model Beezilla.Models.HiveModel

@{
    ViewData["Title"] = "Details";
}
<!DOCTYPE html>
<html>
<head>
    <style>
        .alert {
            padding: 20px;
            background-color: #f44336;
            color: white;
        }

        .closebtn {
            margin-left: 15px;
            color: white;
            font-weight: bold;
            float: right;
            font-size: 22px;
            line-height: 20px;
            cursor: pointer;
            transition: 0.3s;
        }

            .closebtn:hover {
                color: black;
            }
    </style>
    @*<script>
        window.onload = function () {
            var chart = new CanvasJS.Chart("chartContainer", {
                title: {
                    text: "Bee Pop. Vs Varroa Pop."
                },
                axisY: [{
                    title: "Bee",
                    lineColor: "#C24642",
                    tickColor: "#C24642",
                    labelFontColor: "#C24642",
                    titleFontColor: "#C24642",
                    suffix: "k"
                },
                ],
                axisY2: {
                    title: "Varroa Pop",
                    lineColor: "#7F6084",
                    tickColor: "#7F6084",
                    labelFontColor: "#7F6084",
                    titleFontColor: "#7F6084",
                    suffix: "k"
                },
                toolTip: {
                    shared: true
                },
                legend: {
                    cursor: "pointer",
                    itemclick: toggleDataSeries
                },
                data: [{
                    type: "line",
                    name: "Bee",
                    color: "#369EAD",
                    showInLegend: true,
                    axisYIndex: 1,
                    dataPoints: [
                        { x: new Date(2020, 00), y: 85.4 },
                        { x: new Date(2020, 01), y: 92.7 },
                        { x: new Date(2020, 02), y: 64.9 },
                        { x: new Date(2020, 03), y: 58.0 },
                        { x: new Date(2020, 04), y: 63.4 },
                        { x: new Date(2020, 05), y: 69.9 },
                        { x: new Date(2020, 06), y: 88.9 },
                        { x: new Date(2020, 07), y: 66.3 },
                        { x: new Date(2020, 08), y: 82.7 },
                        { x: new Date(2020, 09), y: 60.2 },
                        { x: new Date(2020, 10), y: 87.3 },
                        { x: new Date(2020, 11), y: 98.5 },
                        { x: new Date(2020, 12), y: 98.5 }
                    ]
                },
                {
                    type: "line",
                    name: "Varroa",
                    color: "#7F6084",
                    axisYType: "secondary",
                    showInLegend: true,
                    dataPoints: [
                        { x: new Date(2020, 00), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 01), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 02), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 03), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 04), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 05), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 06), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 07), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 08), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 09), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 10), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 11), y: @Html.DisplayFor(model=> model.Mites)},
                        { x: new Date(2020, 12), y: @Html.DisplayFor(model=> model.Mites)}
                    ]
                }]
            });
            chart.render();

            function toggleDataSeries(e) {
                if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                } else {
                    e.dataSeries.visible = true;
                }
                e.chart.render();
            }

        }
    </script>*@
    <script>
        window.onload = function () {

            var chart = new CanvasJS.Chart("chartContainer", {
                exportEnabled: true,
                animationEnabled: true,
                title: {
                    text: "Hive Composition"
                },
                legend: {
                    cursor: "pointer",
                    itemclick: explodePie
                },
                data: [{
                    type: "pie",
                    showInLegend: true,
                    toolTipContent: "{name}: <strong>{y}%</strong>",
                    indexLabel: "{name} - {y}%",
                    dataPoints: [
                        { y: @Html.DisplayFor(model => model.PercentOfHiveBrood), name: "Brood", exploded: true },
                        { y: @Html.DisplayFor(model => model.PercentOfHiveUnBrood), name: "Uncapped Brood" },
                        { y: @Html.DisplayFor(model => model.PercentOfHiveHoney), name: "Honey" },
                        { y: @Html.DisplayFor(model => model.PercentOfHiveEmpty), name: "Empty" }
                    ]
                }]
            });
            chart.render();
        }

        function explodePie(e) {
            if (typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === "undefined" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
                e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
            } else {
                e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
            }
            e.chart.render();

        }
    </script>
</head>
<body>
    @*<div id="chartContainer" style="height: 300px; width: 100%;"></div>*@

    <h1>Details</h1>
    <span>
        @if (Model.SwarmPotential == "High Risk")
        {
            <div class="alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
                <strong>Warning! </strong>This Hive runs a high risk to swarm!
            </div>
        }
    </span>

    <h2 style="background-color: Black;color: yellow; text-align: center; font-style: oblique">Here is Your Hive!</h2>

    @*<legend style="font-family: Arial Black; color: black; font-size: large;">Hive Location</legend>*@

    <div id="googleMap" style="height:400px;width:100%;"></div>
    <script>

        function myMap() {
            var myCenter = new google.maps.LatLng(@Html.DisplayFor(model => model.HiveLat), @Html.DisplayFor(model => model.HiveLon));
            var mapProp = { center: myCenter, zoom: 12, scrollwheel: false, draggable: true, mapTypeId: google.maps.MapTypeId.ROADMAP };
            var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
            var marker = new google.maps.Marker({ position: myCenter });
            marker.setMap(map);
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@Model.GoogleKey&callback=myMap"></script>

    <footer>
        <p style="background-color: black; font-weight: bold; color:yellow; text-align: center; font-style: oblique">© @DateTime.Now.ToLocalTime()</p>
    </footer>

    <div id="chartContainer" style="height: 370px; width: 100%;"></div>
    <div>
        <h4><img class="card-img" src="@Model.HiveImageUrl"></h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.NumberOfFrames)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.NumberOfFrames)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Temperament)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Temperament)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Brood)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Brood)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.BroodPattern)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.BroodPattern)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Size)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Size)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Species)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Species)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Mites)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Mites)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.HiveType)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.HiveType)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.Propolis)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.Propolis)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.QueenCells)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.QueenCells)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.HiveStrength)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.HiveStrength)
            </dd>
            <dt class="col-sm-10">
                @Html.DisplayNameFor(model => model.SwarmPotential)
            </dt>
            <dd class="col-sm-2">
                @Html.DisplayFor(model => model.SwarmPotential)
            </dd>


        </dl>
    </div>
    @*<script async defer
                <src="https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=AIzaSyAyJKiNPaH91bLlhC-QCpRglCKgdWb9od8">
        </script>*@
    <div>
        <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
</body>
</html>